#!/bin/bash
#80x
#                  _ )  |  |  _ \   __|   _ \   _ \ \ \  /
#                  _ \  |  |  __/  (     (   |  __/  \  /
#                 ___/ \__/  _|   \___| \___/  _|     _|
#
#===============================================================================
#
# Files:
# - Filepath: $BIN/conf_bupcopy
#
#===============================================================================
# - [1] Variables
#===============================================================================

ANS="$1"
LOGFL="$LOG/bupcopy.log"
# Hard drive
BIGD=""
# USB
MINID=""

# Backup folders, format as ["/src"]="/dest"
declare -A DIRBUPS=(
	["$HOME/.audio"]="$BIGD"
	["$HOME/.visual"]="$BIGD"
)

# Restore folders, format as ["/src"]="/dest"
declare -A SRCDIRS=(
	["$BIGD/audio"]="$HOME/.audio"
	["$BIGD/visual"]="$HOME/.visual"
)

#===============================================================================
# - [2] Functions
#===============================================================================

# Remove dot prefixes before backing up
rmdot(){
	local DIR="$1"
	basename "${DIR}" | sed 's/^\.//'
}

bupshit(){
	local SRC="$1"; local DEST="$2"
	# Rsync example for larger folders to be synced to external drive, the
	# $HOME/.audio and $HOME/.visual folders can be replaced or kept and other
	# folders added to the condition as preffered
	#if [[ "$SRC" == "$HOME/.audio" || "$SRC" == "$HOME/.visual" ]]; then
		#NEW_DEST="$DEST/$(rmdot "$(basename "$SRC")")"
		#rsync -avhP "$SRC/" "$NEW_DEST/"
	#fi
	# Folders backed up with Rsync are then excluded in this tarball condition
	if [[ ! "$SRC" == "$HOME/.audio" || ! "$SRC" == "$HOME/.visual" ]]; then
		mkdir -p "$DEST"
		local RCHVPTH="$DEST/$(rmdot "$(basename "$SRC")").tar"
		sudo tar -cvf "$RCHVPTH" -C "$(dirname "$SRC")" "$(basename "$SRC")"
		sudo find "$RCHVPTH" -exec chown "$USER":"$USER" {} \;
	fi
}

copyshit(){
	local SRC="$1"; local DEST="$2"
	# Theres no function to reimplement the dot prefix when Rsync is used for
	# restoration, to handle this format the SRC and DEST in SRCDIRS as
	# ["$BIGD/audio"]="$HOME/.audio" for example, this isnt necessary in the
	# bupshit function where the dot removal is managed by the rmdot function
	#if [[ "$SRC" == "$BIGD/audio" || "$SRC" == "$BIGD/visual" ]]; then
		#rsync -avhP "$SRC/" "$DEST/"
	#fi
	# Folders restored with Rsync are then excluded in this tarball condition
	if [[ ! "$SRC" == "$HOME/.audio" || ! "$SRC" == "$HOME/.visual" ]]; then
		mkdir -p "$DEST"
		sudo tar -xvf "$SRC" -C "$DEST" | sudo tee -a "$LOGFL"
		sudo find "$DEST" -exec chown "$USER":"$USER" {} \;
	fi
}

# Process backup
procbup(){
	for SRC in "${!DIRBUPS[@]}"; do
		bupshit "$SRC" "${DIRBUPS[$SRC]}"
	done
	# Sync contents of USB to hard drive
	#rsync -avhP "$MINID/..." "$BIGD/..."
}

# Process restoration
procrest(){
	for SRC in "${!SRCDIRS[@]}"; do
		copyshit "$SRC" "${SRCDIRS[$SRC]}"
	done
}

#===============================================================================
# - [3] Main
#===============================================================================

[ ! -e "$LOGFL" ] && touch "$LOGFL"
exec > >(tee -a "$LOGFL") 2>&1

if test -z "$ANS"; then echo -e '\nChoose Operation'
	echo -e '- [B] Bupshit\n- [C] Copyshit\n'
	read -rp '- ' ANS
fi

# This script will also take an argument to bypass the operation selection
# to run either the backup or restoration modes
if [[ "$ANS" =~ ^(b|-b|--bupshit|--backup)$ ]]; then
	BP=1; CP=0; echo -e '\nBacking shit up\n'
elif [[ "$ANS" =~ ^(c|-c|--copyshit|--restore)$ ]]; then
	BP=0; CP=1; echo -e '\nCopying shit over\n'
else echo -e '\nInvalid choice\n'; exit 1
fi

[ $BP -eq 1 ] && sleep 2 && procbup
[ $CP -eq 1 ] && sleep 2 && procrest